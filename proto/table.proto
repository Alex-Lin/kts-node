package com.kingsoft.services.table.proto;

option cc_generic_services = true;
option py_generic_services = true;

import "base.proto";
import "filter.proto";

message Column {
    required string column_name = 1;
    required ColumnValue column_value = 2;
}

message ColumnMeta {
    required string column_name = 1;
    required ColumnType column_type = 2;
}

enum ActionType {
    kPut = 1;
    kDelete = 2;
}

message ColumnUpdate {
    required string column_name = 1;
    required ActionType action = 2;
    optional ColumnValue column_value = 3;
}

message Row {
    required PrimaryKey primary_key = 1;
    repeated Column attribute_columns = 2;
}

message ConsumedCapacity {
    required int64 capacity_units = 1;
}

message ProvisionedThroughput {
    optional int64 read_capacity_units = 1;
    optional int64 write_capacity_units = 2;
}

enum TableStatus {
    kCreatingTable = 1;
    kUpdatingTable = 2;
    kDeletingTable = 3;
    kActiveTable = 4;
    kInActiveTable = 5;
}

message TableDescription {
    required int32 table_id = 1;
    required string table_name = 2;
    required ColumnType partition_key_type = 3;
    optional ColumnType row_key_type = 4;
    required string creation_date_time = 5;
    required TableStatus table_status = 6;
    optional ProvisionedThroughput provisioned_throughput = 7;
    required int32 tablets_num = 8;
    required int32 replication_factor = 9;
    optional int64 table_size_bytes = 10;
    optional string table_uuid = 11;
    repeated GlobalSecondaryIndexDescription global_secondary_indexes = 12;
}
message GlobalSecondaryIndexDescription {
    required string index_name = 1;
    required string index_uuid = 2;
    repeated ColumnMeta index_columns = 3;
    required TableStatus index_status = 4;
    required int64 index_size_bytes = 5;
    required ProvisionedThroughput provisioned_throughput = 6;
}

message GlobalSecondaryIndex {
    required string index_name = 1;
    repeated ColumnMeta index_columns = 2;
    required ProvisionedThroughput provisioned_throughput = 3; //use in create table only
}

//CreateTable
message CreateTableRequest {
    required int64 log_id = 1;
    required string table_name = 2;
    required ColumnType partition_key_type = 3;
    optional ColumnType row_key_type = 4;
    required ProvisionedThroughput provisioned_throughput = 5;
    repeated GlobalSecondaryIndex global_secondary_indexes = 6;
}

message CreateTableResponse {
    required int64 log_id = 1;
    required int32 code = 2;
    required string msg = 3;
    optional TableDescription table_description = 4;
}

//DeleteTable
message DeleteTableRequest {
    required int64 log_id = 1;
    required string table_name = 2;
}

message DeleteTableResponse {
    required int64 log_id = 1;
    required int32 code = 2;
    required string msg = 3;
    optional TableDescription table_description = 4;
}

//UpdateTable
message UpdateTableRequest {
    required int64 log_id = 1;
    required string table_name = 2;
    required ProvisionedThroughput provisioned_throughput = 3;
    repeated GlobalSecondaryIndexUpdate global_secondary_index_updates = 4;
}

message GlobalSecondaryIndexUpdate {
    required string index_name = 1;
    required ProvisionedThroughput provisioned_throughput = 2;
}

message UpdateTableResponse {
    required int64 log_id = 1;
    required int32 code = 2;
    required string msg = 3;
    optional TableDescription table_description = 4;
}

//DescribeTable
message DescribeTableRequest {
    required int64 log_id = 1;
    required string table_name = 2;
}

message DescribeTableResponse {
    required int64 log_id = 1;
    required int32 code = 2;
    required string msg = 3;
    optional TableDescription table_description = 4;
}

//ListTables
message ListTablesRequest {
    required int64 log_id = 1;
}

message ListTablesResponse {
    required int64 log_id = 1;
    required int32 code = 2;
    required string msg = 3;
    repeated string table_names = 4;
}

//EnableTable
message EnableTableRequest {
    required int64 log_id = 1;
    required string table_name = 2;
}

message EnableTableResponse {
    required int64 log_id = 1;
    required int32 code = 2;
    required string msg = 3;
}

//DisableTable
message DisableTableRequest {
    required int64 log_id = 1;
    required string table_name = 2;
}

message DisableTableResponse {
    required int64 log_id = 1;
    required int32 code = 2;
    required string msg = 3;
}

//GetRow
message GetRowRequest {
    required int64 log_id = 1;
    required string table_name = 2;
    required PrimaryKey primary_key = 3;
    repeated string column_names = 4;
    optional bool is_strong_consistent_read = 5 [default = false];
    optional Filter filter = 6;
}

message GetRowResponse {
    required int64 log_id = 1;
    required int32 code = 2;
    required string msg = 3;
    optional Row row = 4;
    optional ConsumedCapacity consumed_capacity = 5;
}

message GetReplicaRowsResponse {
    required int64 log_id = 1;
    required int32 code = 2;
    required string msg = 3;
    repeated int64 servers = 4;
    repeated Row rows = 5;
}

//PutRow
message PutRowRequest {
    required int64 log_id = 1;
    required string table_name = 2;
    required Row row = 3;
    optional Condition condition = 4;
    optional int64 reserved = 5;
}

message PutRowResponse {
    required int64 log_id = 1;
    required int32 code = 2;
    required string msg = 3;
    optional ConsumedCapacity consumed_capacity = 4;
    optional bool processed = 5;
    optional ConsumedCapacity index_consumed_capacity = 6;
}

//UpdateRow
message UpdateRowRequest {
    required int64 log_id = 1;
    required string table_name = 2;
    required PrimaryKey primary_key = 3;
    repeated ColumnUpdate column_updates = 4;
    optional Condition condition = 5;
}

message UpdateRowResponse {
    required int64 log_id = 1;
    required int32 code = 2;
    required string msg = 3;
    optional ConsumedCapacity consumed_capacity = 4;
    optional bool processed = 5;
    optional ConsumedCapacity index_consumed_capacity = 6;
}

//DeleteRow
message DeleteRowRequest {
    required int64 log_id = 1;
    required string table_name = 2;
    required PrimaryKey primary_key = 3;
    optional Condition condition = 4;
}

message DeleteRowResponse {
    required int64 log_id = 1;
    required int32 code = 2;
    required string msg = 3;
    optional ConsumedCapacity consumed_capacity = 4;
    optional bool processed = 5;
}

//Scan
message ScanRequest {
    required int64 log_id = 1;
    required string table_name = 2;
    repeated string column_names = 3;
    optional bool is_strong_consistent_read = 4 [default = false];
    optional PrimaryKey inclusive_start_key = 5;
    optional PrimaryKey exclusive_end_key = 6;
    optional int32 limit = 7;
    optional Filter filter = 8;
}

message ScanResponse {
    required int64 log_id = 1;
    required int32 code = 2;
    required string msg = 3;
    repeated Row rows = 4;
    optional PrimaryKey next_start_key = 5;
    optional ConsumedCapacity consumed_capacity = 6;
}

//BatchGetRow
message BatchGetRowRequest {
    required int64 log_id = 1;
    repeated GetRowsRequest get_rows = 2;
}

message GetRowsRequest {
    required int64 log_id = 1;
    required string table_name = 2;
    repeated PrimaryKey primary_keys = 3;
    repeated string column_names = 4;
    optional bool is_strong_consistent_read = 5 [default = false];
    optional Filter filter = 6;
}

message BatchGetRowResponse {
    required int64 log_id = 1;
    required int32 code = 2;
    required string msg = 3;
    repeated GetRowsResponse get_rows = 4;
    optional ConsumedCapacity consumed_capacity = 5;
}

message GetRowsResponse {
    required int64 log_id = 1;
    required int32 code = 2;
    required string msg = 3;
    optional string table_name = 4;
    repeated Row rows = 5;
    optional GetRowsRequest unprocessed_rows = 6;
    optional ConsumedCapacity consumed_capacity = 7;
}

//BatchWriteRow
message BatchWriteRowRequest {
    required int64 log_id = 1;
    repeated WriteRowsRequest write_rows = 2;
}

message WriteRowsRequest {
    required int64 log_id = 1;
    required string table_name = 2;
    repeated PutRowRequest put_rows = 3;
    repeated UpdateRowRequest update_rows = 4;
    repeated DeleteRowRequest delete_rows = 5;
}

message BatchWriteRowResponse {
    required int64 log_id = 1;
    required int32 code = 2;
    required string msg = 3;
    repeated WriteRowsResponse write_rows = 4;
    optional ConsumedCapacity consumed_capacity = 5;
}

message WriteRowsResponse {
    required int64 log_id = 1;
    required int32 code = 2;
    required string msg = 3;
    optional string table_name = 4;
    optional WriteRowsRequest unprocessed_rows = 5;
    optional ConsumedCapacity consumed_capacity = 6;
    optional bool processed = 7;
    optional ConsumedCapacity index_consumed_capacity = 8;
}

message EchoRequest {
    required int64 log_id = 1;
    required string msg = 2;
}

message EchoResponse {
    required int64 log_id = 1;
    required int32 code = 2;
    required string msg = 3;
    required string result = 4;
}

message QueryRequest {
    required int64 log_id = 1;
    required string table_name = 2;
    required string index_name = 3;
    repeated string column_names = 4;
    repeated KeyCondition key_conditions = 5;
    optional Filter filter = 6;
    optional int32 limit = 7;
    optional bool is_strong_consistent_read = 8;
    optional PrimaryKey inclusive_start_key = 9;
}

message QueryResponse {
    required int64 log_id = 1;
    required int32 code = 2;
    required string msg = 3;
    repeated Row rows = 4;
    optional PrimaryKey next_start_key = 5;
    optional ConsumedCapacity consumed_capacity = 6;
}
